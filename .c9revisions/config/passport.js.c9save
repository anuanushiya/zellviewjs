{"ts":1353968719769,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar mongoose = require('mongoose')\n  , LocalStrategy = require('passport-local').Strategy\n  , TwitterStrategy = require('passport-twitter').Strategy\n  , FacebookStrategy = require('passport-facebook').Strategy\n  , GitHubStrategy = require('passport-github').Strategy\n  , GoogleStrategy = require('passport-google-oauth').Strategy\n  , User = mongoose.model('User')\n\n\nexports.boot = function (passport, config) {\n  // require('./initializer')\n\n  // serialize sessions\n  passport.serializeUser(function(user, done) {\n    done(null, user.id)\n  })\n\n  passport.deserializeUser(function(id, done) {\n    User.findOne({ _id: id }, function (err, user) {\n      done(err, user)\n    })\n  })\n\n  // use local strategy\n  passport.use(new LocalStrategy({\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    function(email, password, done) {\n        console.log('suche: ' + email);\n        User.findOne({ email: email }, function (err, user) {\n            if (err) { return done(err) }\n            if (!user) {\n            return done(null, false, { message: 'Unknown user' })\n        }\n        if (!user.authenticate(password)) {\n            return done(null, false, { message: 'Invalid password' })\n        }\n        return done(null, user)\n      })\n    }\n  ))\n\n  // use twitter strategy\n  passport.use(new TwitterStrategy({\n        consumerKey: config.twitter.clientID\n      , consumerSecret: config.twitter.clientSecret\n      , callbackURL: config.twitter.callbackURL\n    },\n    function(token, tokenSecret, profile, done) {\n        User.findOne({ 'twitter.id': profile.id }, function (err, user) {\n            if (err)    { return done(err) }\n            if (!user)  {\n                user = new User({\n                    name:       profile.displayName,\n                    username:   profile.username,\n                    provider:   'twitter',\n                    twitter:    profile._json\n                });\n                user.save(function (err, user) {\n                    if (err) console.log(err);\n                    return done(err, user);\n                });\n            }\n            else {\n            return done(err, user);\n            }\n        });\n    }));\n\n    // use facebook strategy  \n    passport.use(new FacebookStrategy ({\n        clientID: config.facebook.clientID,\n        clientSecret: config.facebook.clientSecret,\n        callbackURL: config.facebook.callbackURL\n    },\n    function(accessToken, refreshToken, profile, done) {\n      User.findOne({ 'facebook.id': profile.id }, function (err, user) {\n        if (err) { return done(err) }\n        if (!user) {\n          user = new User({\n              name: profile.displayName\n            , email: profile.emails[0].value\n            , username: profile.username\n            , provider: 'facebook'\n            , facebook: profile._json\n          })\n          user.save(function (err, user) {\n            if (err) console.log(err)\n            return done(err, user)\n          })\n        }\n        else {\n          return done(err, user)\n        }\n      })\n    }\n  ))\n\n  // use github strategy\n  passport.use(new GitHubStrategy({\n      clientID: config.github.clientID,\n      clientSecret: config.github.clientSecret,\n      callbackURL: config.github.callbackURL\n    },\n    function(accessToken, refreshToken, profile, done) {\n      User.findOne({ 'github.id': profile.id }, function (err, user) {\n        if (!user) {\n          user = new User({\n              name: profile.displayName\n            , email: profile.emails[0].value\n            , username: profile.username\n            , provider: 'github'\n            , github: profile._json\n          })\n          user.save()\n        }\n        return done(err, user)\n      })\n    }\n  ))\n\n  // use google strategy\n  passport.use(new GoogleStrategy({\n      consumerKey: config.google.clientID,\n      consumerSecret: config.google.clientSecret,\n      callbackURL: config.google.callbackURL\n    },\n    function(accessToken, refreshToken, profile, done) {\n      User.findOne({ 'google.id': profile.id }, function (err, user) {\n        if (!user) {\n          user = new User({\n              name: profile.displayName\n            , email: profile.emails[0].value\n            , username: profile.username\n            , provider: 'google'\n            , google: profile._json\n          })\n          user.save()\n        }\n        return done(err, user)\n      })\n    }\n  ));\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4408}]],"length":4408}
